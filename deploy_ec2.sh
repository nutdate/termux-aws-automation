#!/bin/bash
set -e
trap 'echo "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î $LINENO"; exit 1' ERR

# ‡πÇ‡∏´‡∏•‡∏î config
source ./config.sh

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
validate_vars() {
    echo "üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£..."
    local vars=("IMAGE_ID" "INSTANCE_TYPE" "KEY_NAME" "SECURITY_GROUP_ID" \
                "SUBNET_ID" "ALLOCATION_ID" "DOMAIN_NAME" "HOSTED_ZONE_NAME" "VPC_ID")
    for var in "${vars[@]}"; do
        if [ -z "${!var}" ]; then
            echo "‚ùå ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ $var ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤"; exit 1
        fi
    done
    echo "‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"
}

# ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ --dry-run ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [[ "$1" == "--dry-run" ]]; then
    DRY_RUN=true
else
    DRY_RUN=false
fi

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å aws ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
aws_cmd() {
    if $DRY_RUN; then
        echo "[DRY-RUN] aws $*"
    else
        aws "$@"
    fi
}

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
validate_vars
echo "--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ EC2 Instance ---"

# 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î IPv6 ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö VPC ‡πÅ‡∏•‡∏∞ Subnet
echo "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IPv6..."
VPC_IPV6_CIDR=$(aws_cmd ec2 describe-vpcs --vpc-ids "$VPC_ID" --query "Vpcs[0].Ipv6CidrBlockAssociationSet[0].Ipv6CidrBlock" --output text || echo "None")
if [ "$VPC_IPV6_CIDR" = "None" ]; then
    echo "VPC ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ IPv6 CIDR Block ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ..."
    aws_cmd ec2 associate-vpc-cidr-block --vpc-id "$VPC_ID" --amazon-provided-ipv6-cidr-block
    aws_cmd ec2 wait vpc-ipv6-cidr-block-association-state --vpc-id "$VPC_ID" --state "associated"
    VPC_IPV6_CIDR=$(aws_cmd ec2 describe-vpcs --vpc-ids "$VPC_ID" --query "Vpcs[0].Ipv6CidrBlockAssociationSet[0].Ipv6CidrBlock" --output text)
fi

SUBNET_IPV6_CIDR=$(aws_cmd ec2 describe-subnets --subnet-ids "$SUBNET_ID" --query "Subnets[0].Ipv6CidrBlockAssociationSet[0].Ipv6CidrBlock" --output text || echo "None")
if [ "$SUBNET_IPV6_CIDR" = "None" ]; then
    echo "Subnet ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ IPv6 CIDR Block ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ..."
    VPC_IPV6_PREFIX=$(echo "$VPC_IPV6_CIDR" | cut -d: -f1-4)
    for i in $(seq 0 255); do
        if aws_cmd ec2 associate-subnet-cidr-block --subnet-id "$SUBNET_ID" --ipv6-cidr-block "${VPC_IPV6_PREFIX}:${i}::/64" > /dev/null 2>&1; then
            echo "‡∏Å‡∏≥‡∏´‡∏ô‡∏î IPv6 CIDR Block: ${VPC_IPV6_PREFIX}:${i}::/64 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ"
            break
        fi
    done
fi
echo "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IPv6 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‚úÖ"

# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á EC2 Instance (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
echo "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ EC2 Instance ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà..."
INSTANCE_ID=$(aws_cmd ec2 describe-instances --filters "Name=tag:Name,Values=My-FreeTier-EC2-Instance" "Name=instance-state-name,Values=running" --query "Reservations[0].Instances[0].InstanceId" --output text 2>/dev/null)

if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "None" ]; then
    echo "‡πÑ‡∏°‡πà‡∏û‡∏ö Instance ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà... ‚è≥"
    INSTANCE_ID=$(aws_cmd ec2 run-instances \
        --image-id "$IMAGE_ID" \
        --count 1 \
        --instance-type "$INSTANCE_TYPE" \
        --key-name "$KEY_NAME" \
        --security-group-ids "$SECURITY_GROUP_ID" \
        --subnet-id "$SUBNET_ID" \
        --ipv6-address-count 1 \
        --block-device-mappings "DeviceName=/dev/sda1,Ebs={VolumeSize=30,DeleteOnTermination=true}" \
        --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=My-FreeTier-EC2-Instance}]' \
        --query "Instances[0].InstanceId" --output text)
    echo "EC2 Instance ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢ ID: $INSTANCE_ID"
    echo "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ Instance ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô... ‚è∞"
    aws_cmd ec2 wait instance-running --instance-ids "$INSTANCE_ID"
    echo "Instance ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß üéâ"
else
    echo "‡∏û‡∏ö Instance ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ID: $INSTANCE_ID"
fi

# 3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Elastic IP (IPv4)
echo "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Elastic IP..."
EIP_ASSOC_ID=$(aws_cmd ec2 describe-addresses --allocation-id "$ALLOCATION_ID" --query "Addresses[0].AssociationId" --output text 2>/dev/null)
if [ -z "$EIP_ASSOC_ID" ]; then
    echo "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Elastic IP: $ALLOCATION_ID ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Instance: $INSTANCE_ID"
    aws_cmd ec2 associate-address --instance-id "$INSTANCE_ID" --allocation-id "$ALLOCATION_ID"
    echo "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á Elastic IP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ"
else
    echo "Elastic IP ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚úÖ"
fi

# 4. ‡∏î‡∏∂‡∏á IP Address
echo "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á IP Address ‡∏Ç‡∏≠‡∏á Instance... üåê"
IPV4_ADDRESS=$(aws_cmd ec2 describe-instances --instance-ids "$INSTANCE_ID" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
IPV6_ADDRESS=$(aws_cmd ec2 describe-instances --instance-ids "$INSTANCE_ID" --query "Reservations[0].Instances[0].NetworkInterfaces[0].Ipv6Addresses[0].Ipv6Address" --output text)

echo "Public IPv4 Address: $IPV4_ADDRESS"
echo "Public IPv6 Address: $IPV6_ADDRESS"

# 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DNS Record ‡πÉ‡∏ô Route 53
echo "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DNS records..."
HOSTED_ZONE_ID=$(aws_cmd route53 list-hosted-zones-by-name --dns-name "$HOSTED_ZONE_NAME." --query "HostedZones[0].Id" --output text | cut -d'/' -f3)

aws_cmd route53 change-resource-record-sets \
    --hosted-zone-id "$HOSTED_ZONE_ID" \
    --change-batch '{
        "Changes": [{
            "Action": "UPSERT",
            "ResourceRecordSet": {
                "Name": "'"$DOMAIN_NAME"'",
                "Type": "A",
                "TTL": 300,
                "ResourceRecords": [{"Value": "'"$IPV4_ADDRESS"'"}]
            }
        },{
            "Action": "UPSERT",
            "ResourceRecordSet": {
                "Name": "'"$DOMAIN_NAME"'",
                "Type": "AAAA",
                "TTL": 300,
                "ResourceRecords": [{"Value": "'"$IPV6_ADDRESS"'"}]
            }
        }]
    }'
echo "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DNS records ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ"

echo "--- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ---"
echo "ssh -i \"$KEY_NAME.pem\" ubuntu@$IPV4_ADDRESS"
